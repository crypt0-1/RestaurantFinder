{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","event","target","value","searchYelp","terms","preventDefault","Object","keys","sortByOptionValue","onClick","handleSortByChange","getSortByClass","renderSortByOptions","onChange","placeholder","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ebe54d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"Business\">\r\n          <div className=\"image-container\">\r\n            <img src={this.props.business.imageSrc} alt=''/>\r\n          </div>\r\n          <h2>{this.props.business.name}</h2>\r\n          <div className=\"Business-information\">\r\n            <div className=\"Business-address\">\r\n              <p>{this.props.business.address}</p>\r\n              <p>{this.props.business.city}</p>\r\n              <p>{`${this.props.business.state} ${this.props.business.zipCode}`}</p>\r\n            </div>\r\n            <div className=\"Business-reviews\">\r\n              <h3>{this.props.business.category.toUpperCase()}</h3>\r\n              <h3 className=\"rating\">{`${this.props.business.rating} stars`}</h3>\r\n              <p>{`${this.props.business.reviewCount} reviews`}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\nexport default Business;","import React from \"react\";\r\nimport Business from \"../Business/Business\";\r\nimport \"./BusinessList.css\";\r\nimport '../App/App'\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"BusinessList\">\r\n         {\r\n            this.props.businesses.map(business => {\r\n              return <Business business={business} key={business.id}/>\r\n            }) \r\n          }\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default BusinessList;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      term:'',\r\n      location:'',\r\n      sortBy:'best_match',\r\n     \r\n  \r\n  };\r\n  this.handleTermChange= this.handleTermChange.bind(this);\r\n  this.handleLocationChange=this.handleLocationChange.bind(this);\r\n  this.handleSearch=this.handleSearch.bind(this);\r\n\r\n  this.sortByOptions = {\r\n    'Best Match': 'best_match',\r\n    'Highest Rated': 'rating',\r\n    'Most Reviewed': 'review_count'\r\n  };\r\n  };\r\n\r\n  getSortByClass(sortByOptions){\r\n    if(this.state.sortBy=== sortByOptions){\r\n      return 'active';\r\n    }\r\n    else{\r\n      return '';\r\n    }\r\n\r\n  };\r\n\r\n  handleSortByChange(sortByOption){\r\n    this.setState({\r\n      sortBy:sortByOption\r\n    });\r\n    \r\n  };\r\n  \r\n  handleTermChange(event) {\r\n    this.setState({\r\n      term:event.target.value\r\n  });\r\n  \r\n  };\r\n  \r\n  handleLocationChange(event){\r\n    this.setState({\r\n      location: event.target.value\r\n    });\r\n  \r\n\r\n\r\n  };\r\n\r\nhandleSearch(event){\r\n  this.props.searchYelp(this.state.terms,this.state.location,this.state.sortBy);\r\n  event.preventDefault();\r\n\r\n};\r\n\r\n\r\n\r\n\r\n  renderSortByOptions() {\r\n    return Object.keys(this.sortByOptions).map(sortByOption => {\r\n      let sortByOptionValue = this.sortByOptions[sortByOption];\r\n      return <li onClick={this.handleSortByChange.bind(this,sortByOptionValue)} \r\n      className={this.getSortByClass(sortByOptionValue)} \r\n      key={sortByOptionValue}>{sortByOption}</li>;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div  className=\"SearchBar\">\r\n        <div  className=\"SearchBar-sort-options\">\r\n          <ul>\r\n            {this.renderSortByOptions()}\r\n          </ul>\r\n        </div>\r\n        <div className=\"SearchBar-fields\">\r\n          <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\r\n          <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <a  onClick={this.handleSearch}>Let's Go</a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;","const apiKey =\r\n  \"8Ihqv6OcHboxhm0F6FqgXyTgEX-AmlhCDDOFxHGESRy0e1EsCtfhreW-umMjscxxSg_xKLA-Sz51NNyDNa_SIy8KvNMumIX5qF60nby0yHqXFDaFRoQFadnZ5XvGXnYx\";\r\n\r\n  const Yelp = {\r\n    search(term, location, sortBy) {\r\n      return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${apiKey}`\r\n        }\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        if (jsonResponse.businesses) {\r\n          return jsonResponse.businesses.map(business => ({\r\n            id: business.id,\r\n            imageSrc: business.image_url,\r\n            name: business.name,\r\n            address: business.location.address1,\r\n            city: business.location.city,\r\n            state: business.location.state,\r\n            zipCode: business.location.zip_code,\r\n            category: business.categories[0].title,\r\n            rating: business.rating,\r\n            reviewCount: business.review_count\r\n          }));\r\n        }\r\n      });\r\n    }\r\n  };\r\n  export default Yelp;","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport BusinessList from \"../BusinessList/BusinessList\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Yelp from \"../../util/Yelp\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      businesses: [],\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then((businesses) => {\n      this.setState({ businesses: businesses });\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <h1>ravenous</h1> */}\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}